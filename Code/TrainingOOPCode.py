# -*- coding: utf-8 -*-
"""2702244284_Training OOP UTS MD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m0rcdoaPqf3j3QEVWnAtbcbKscA5r_nA
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, RobustScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
import pickle
import gzip

class DataHandler:
    def __init__(self, file_path):
        self.file_path = file_path
        self.df = None
        self.X_train = None
        self.X_test = None
        self.y_train = None
        self.y_test = None
        self.cat_cols = ['type_of_meal_plan', 'room_type_reserved', 'market_segment_type']
        self.standard_cols = ['arrival_month', 'arrival_date']
        self.robust_cols = ['no_of_adults', 'no_of_children', 'no_of_weekend_nights',
                            'no_of_week_nights', 'required_car_parking_space', 'lead_time',
                            'arrival_year', 'repeated_guest', 'no_of_previous_cancellations',
                            'no_of_previous_bookings_not_canceled', 'avg_price_per_room',
                            'no_of_special_requests']

    def load_data(self):
        self.df = pd.read_csv(self.file_path)
        self.df.drop(columns=['Booking_ID'], inplace=True)
        self.df['booking_status'] = self.df['booking_status'].map({'Not_Canceled': 0, 'Canceled': 1})

    def preprocess(self):
        X = self.df.drop(columns=['booking_status'])
        y = self.df['booking_status']
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # One-hot encode
        X_train = pd.get_dummies(X_train, columns=self.cat_cols, drop_first=True)
        X_test = pd.get_dummies(X_test, columns=self.cat_cols, drop_first=True)
        X_test = X_test.reindex(columns=X_train.columns, fill_value=0)

        # Scale
        self.standard_scaler = StandardScaler()
        self.robust_scaler = RobustScaler()

        X_train[self.standard_cols] = self.standard_scaler.fit_transform(X_train[self.standard_cols])
        X_test[self.standard_cols] = self.standard_scaler.transform(X_test[self.standard_cols])
        X_train[self.robust_cols] = self.robust_scaler.fit_transform(X_train[self.robust_cols])
        X_test[self.robust_cols] = self.robust_scaler.transform(X_test[self.robust_cols])

        self.X_train, self.X_test, self.y_train, self.y_test = X_train, X_test, y_train, y_test

"""Codingan ini digunakan untuk load data mentah, preprocessing (encoding dan scaling), dan split train-test."""

class ModelTrainer:
    def __init__(self, X_train, y_train):
        self.X_train = X_train
        self.y_train = y_train
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)

    def train(self):
        self.model.fit(self.X_train, self.y_train)

    def save_model(self, path):
        with gzip.open(path, 'wb') as f:
            pickle.dump(self.model, f)

"""Codingan ini digunakan untuk inisialisasi dan training model Random Forest serta menyimpan model dalam format .pkl.gz"""

# Load and preprocess
handler = DataHandler("/content/Dataset_B_hotel.csv")
handler.load_data()
handler.preprocess()

# Train model
trainer = ModelTrainer(handler.X_train, handler.y_train)
trainer.train()

# Evaluate
pred = trainer.model.predict(handler.X_test)
print("Classification Report:")
print(classification_report(handler.y_test, pred))
print(f"Accuracy: {accuracy_score(handler.y_test, pred) * 100:.2f}%")

# Save model
trainer.save_model("best_rf_model.pkl.gz")  # pakai .gz agar sesuai format gzip

# Simpan StandardScaler
with open("standard_scaler.pkl", "wb") as f:
    pickle.dump(handler.standard_scaler, f)

# Simpan RobustScaler
with open("robust_scaler.pkl", "wb") as f:
    pickle.dump(handler.robust_scaler, f)

# Simpan list kolom hasil one-hot encoding
with open("columns.pkl", "wb") as f:
    pickle.dump(handler.X_train.columns.tolist(), f)